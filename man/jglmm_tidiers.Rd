% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyers.R
\name{jglmm_tidiers}
\alias{jglmm_tidiers}
\alias{tidy.jglmm}
\alias{augment.jglmm}
\title{Tidying methods for jglmm models}
\usage{
\method{tidy}{jglmm}(x, ...)

\method{augment}{jglmm}(x, ...)
}
\arguments{
\item{x}{An object of class `jglmm`, as returned by `jglmm()`.}

\item{...}{Optional additional arguments, currently none are used.}
}
\value{
`tidy` returns a data frame with one row for each estimated effect.
It contains the columns:
  \item{effect}{\code{"fixed"} for fixed effects, \code{"ran_pars"} for random effect parameters}
  \item{group}{the group within which the random effect is being estimated (\code{NA} for fixed effects)}
  \item{param}{parameter being estimated (\code{beta} for fixed effects, \code{sd} or \code{cor} for random effect parameters)}
  \item{term}{term being estimated}
  \item{estimate}{estimated coefficient}
  \item{std.error}{standard error}
  \item{statistic}{z-statistic (\code{NA} for modes)}
  \item{p.value}{p-value computed from z-statistic (\code{NA} for modes)}

`augment` returns one row for each original observation, with these
columns added:
  \item{.fitted}{predicted values}
  \item{.resid}{residuals}
}
\description{
These methods tidy the coefficients and fitted values from `jglmm` objects.
}
\examples{
\dontrun{
jglmm_setup()
cbpp <- dplyr::mutate(lme4::cbpp, prop = incidence / size)
gm <- jglmm(prop ~ period + (1 | herd), data = cbpp, family = "binomial",
            weights = cbpp$size)
tidy(gm)
augment(gm)
}
}
